// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __QUERY_H_
#define __QUERY_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace CommActivityManager
{
    struct UserInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "CommActivityManager.UserInfo";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        UserInfo()
        :name(""),phone(""),gender(""),registration_time(""),group("")
        {
        }
        void resetDefautlt()
        {
            name = "";
            phone = "";
            gender = "";
            registration_time = "";
            group = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(name, 0);
            _os.write(phone, 1);
            _os.write(gender, 2);
            _os.write(registration_time, 3);
            _os.write(group, 4);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(name, 0, true);
            _is.read(phone, 1, true);
            _is.read(gender, 2, true);
            _is.read(registration_time, 3, true);
            _is.read(group, 4, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(name,"name");
            _ds.display(phone,"phone");
            _ds.display(gender,"gender");
            _ds.display(registration_time,"registration_time");
            _ds.display(group,"group");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(name, true);
            _ds.displaySimple(phone, true);
            _ds.displaySimple(gender, true);
            _ds.displaySimple(registration_time, true);
            _ds.displaySimple(group, false);
            return _os;
        }
    public:
        std::string name;
        std::string phone;
        std::string gender;
        std::string registration_time;
        std::string group;
    };
    inline bool operator==(const UserInfo&l, const UserInfo&r)
    {
        return l.name == r.name && l.phone == r.phone && l.gender == r.gender && l.registration_time == r.registration_time && l.group == r.group;
    }
    inline bool operator!=(const UserInfo&l, const UserInfo&r)
    {
        return !(l == r);
    }

    struct ActivityItem : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "CommActivityManager.ActivityItem";
        }
        static string MD5()
        {
            return "6c238a6cd67ebcc9c05cad444cdbf372";
        }
        ActivityItem()
        :activity_id(0),title(""),sponsor(""),community(""),create_time(""),start_time(""),stop_time(""),registry_start_time(""),registry_stop_time(""),content(""),target("")
        {
        }
        void resetDefautlt()
        {
            activity_id = 0;
            title = "";
            sponsor = "";
            community = "";
            create_time = "";
            start_time = "";
            stop_time = "";
            registry_start_time = "";
            registry_stop_time = "";
            content = "";
            target = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(activity_id, 0);
            _os.write(title, 1);
            _os.write(sponsor, 2);
            _os.write(community, 3);
            _os.write(create_time, 4);
            _os.write(start_time, 5);
            _os.write(stop_time, 6);
            _os.write(registry_start_time, 7);
            _os.write(registry_stop_time, 8);
            _os.write(content, 9);
            _os.write(target, 10);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(activity_id, 0, true);
            _is.read(title, 1, true);
            _is.read(sponsor, 2, true);
            _is.read(community, 3, true);
            _is.read(create_time, 4, true);
            _is.read(start_time, 5, true);
            _is.read(stop_time, 6, true);
            _is.read(registry_start_time, 7, true);
            _is.read(registry_stop_time, 8, true);
            _is.read(content, 9, true);
            _is.read(target, 10, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(activity_id,"activity_id");
            _ds.display(title,"title");
            _ds.display(sponsor,"sponsor");
            _ds.display(community,"community");
            _ds.display(create_time,"create_time");
            _ds.display(start_time,"start_time");
            _ds.display(stop_time,"stop_time");
            _ds.display(registry_start_time,"registry_start_time");
            _ds.display(registry_stop_time,"registry_stop_time");
            _ds.display(content,"content");
            _ds.display(target,"target");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(activity_id, true);
            _ds.displaySimple(title, true);
            _ds.displaySimple(sponsor, true);
            _ds.displaySimple(community, true);
            _ds.displaySimple(create_time, true);
            _ds.displaySimple(start_time, true);
            _ds.displaySimple(stop_time, true);
            _ds.displaySimple(registry_start_time, true);
            _ds.displaySimple(registry_stop_time, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(target, false);
            return _os;
        }
    public:
        tars::Int32 activity_id;
        std::string title;
        std::string sponsor;
        std::string community;
        std::string create_time;
        std::string start_time;
        std::string stop_time;
        std::string registry_start_time;
        std::string registry_stop_time;
        std::string content;
        std::string target;
    };
    inline bool operator==(const ActivityItem&l, const ActivityItem&r)
    {
        return l.activity_id == r.activity_id && l.title == r.title && l.sponsor == r.sponsor && l.community == r.community && l.create_time == r.create_time && l.start_time == r.start_time && l.stop_time == r.stop_time && l.registry_start_time == r.registry_start_time && l.registry_stop_time == r.registry_stop_time && l.content == r.content && l.target == r.target;
    }
    inline bool operator!=(const ActivityItem&l, const ActivityItem&r)
    {
        return !(l == r);
    }

    struct CommunityItem : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "CommActivityManager.CommunityItem";
        }
        static string MD5()
        {
            return "cca41655ef02173a34fb6fd7b66ff38e";
        }
        CommunityItem()
        :community_id(0),name(""),chairman(""),introduction("")
        {
        }
        void resetDefautlt()
        {
            community_id = 0;
            name = "";
            chairman = "";
            introduction = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(community_id, 0);
            _os.write(name, 1);
            _os.write(chairman, 2);
            if (introduction != "")
            {
                _os.write(introduction, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(community_id, 0, true);
            _is.read(name, 1, true);
            _is.read(chairman, 2, true);
            _is.read(introduction, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(community_id,"community_id");
            _ds.display(name,"name");
            _ds.display(chairman,"chairman");
            _ds.display(introduction,"introduction");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(community_id, true);
            _ds.displaySimple(name, true);
            _ds.displaySimple(chairman, true);
            _ds.displaySimple(introduction, false);
            return _os;
        }
    public:
        tars::Int32 community_id;
        std::string name;
        std::string chairman;
        std::string introduction;
    };
    inline bool operator==(const CommunityItem&l, const CommunityItem&r)
    {
        return l.community_id == r.community_id && l.name == r.name && l.chairman == r.chairman && l.introduction == r.introduction;
    }
    inline bool operator!=(const CommunityItem&l, const CommunityItem&r)
    {
        return !(l == r);
    }

    struct CommunityInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "CommActivityManager.CommunityInfo";
        }
        static string MD5()
        {
            return "1c368d5ea8a5d4783adc158789f8de5b";
        }
        CommunityInfo()
        :memberCount(0),activityCount(0)
        {
        }
        void resetDefautlt()
        {
            memberCount = 0;
            activityCount = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(memberCount, 0);
            _os.write(activityCount, 1);
            if (activityList.size() > 0)
            {
                _os.write(activityList, 2);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(memberCount, 0, true);
            _is.read(activityCount, 1, true);
            _is.read(activityList, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(memberCount,"memberCount");
            _ds.display(activityCount,"activityCount");
            _ds.display(activityList,"activityList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(memberCount, true);
            _ds.displaySimple(activityCount, true);
            _ds.displaySimple(activityList, false);
            return _os;
        }
    public:
        tars::Int32 memberCount;
        tars::Int32 activityCount;
        vector<CommActivityManager::ActivityItem> activityList;
    };
    inline bool operator==(const CommunityInfo&l, const CommunityInfo&r)
    {
        return l.memberCount == r.memberCount && l.activityCount == r.activityCount && l.activityList == r.activityList;
    }
    inline bool operator!=(const CommunityInfo&l, const CommunityInfo&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class QueryPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~QueryPrxCallback(){}
        virtual void callback_getActivityDetail(tars::Int32 ret,  const CommActivityManager::ActivityItem& sRsp)
        { throw std::runtime_error("callback_getActivityDetail() override incorrect."); }
        virtual void callback_getActivityDetail_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getActivityDetail_exception() override incorrect."); }

        virtual void callback_getActivityList(tars::Int32 ret,  const vector<CommActivityManager::ActivityItem>& sRsp)
        { throw std::runtime_error("callback_getActivityList() override incorrect."); }
        virtual void callback_getActivityList_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getActivityList_exception() override incorrect."); }

        virtual void callback_getCommunityDetail(tars::Int32 ret,  const CommActivityManager::CommunityInfo& sRsp)
        { throw std::runtime_error("callback_getCommunityDetail() override incorrect."); }
        virtual void callback_getCommunityDetail_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getCommunityDetail_exception() override incorrect."); }

        virtual void callback_getCommunityList(tars::Int32 ret,  const vector<CommActivityManager::CommunityItem>& sRsp)
        { throw std::runtime_error("callback_getCommunityList() override incorrect."); }
        virtual void callback_getCommunityList_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getCommunityList_exception() override incorrect."); }

        virtual void callback_getUserInfo(tars::Int32 ret,  const CommActivityManager::UserInfo& sRsp)
        { throw std::runtime_error("callback_getUserInfo() override incorrect."); }
        virtual void callback_getUserInfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getUserInfo_exception() override incorrect."); }

        virtual void callback_test(tars::Int32 ret)
        { throw std::runtime_error("callback_test() override incorrect."); }
        virtual void callback_test_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_test_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Query_all[]=
            {
                "getActivityDetail",
                "getActivityList",
                "getCommunityDetail",
                "getCommunityList",
                "getUserInfo",
                "test"
            };
            pair<string*, string*> r = equal_range(__Query_all, __Query_all+6, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Query_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getActivityDetail_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CommActivityManager::ActivityItem sRsp;
                    _is.read(sRsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getActivityDetail(_ret, sRsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getActivityList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<CommActivityManager::ActivityItem> sRsp;
                    _is.read(sRsp, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getActivityList(_ret, sRsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getCommunityDetail_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CommActivityManager::CommunityInfo sRsp;
                    _is.read(sRsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getCommunityDetail(_ret, sRsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getCommunityList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<CommActivityManager::CommunityItem> sRsp;
                    _is.read(sRsp, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getCommunityList(_ret, sRsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getUserInfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CommActivityManager::UserInfo sRsp;
                    _is.read(sRsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getUserInfo(_ret, sRsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_test(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<QueryPrxCallback> QueryPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class QueryPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~QueryPrxCallbackPromise(){}
    public:
        struct PromisegetActivityDetail: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            CommActivityManager::ActivityItem sRsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryPrxCallbackPromise::PromisegetActivityDetail > PromisegetActivityDetailPtr;

        QueryPrxCallbackPromise(const promise::Promise< QueryPrxCallbackPromise::PromisegetActivityDetailPtr > &promise)
        : _promise_getActivityDetail(promise)
        {}
        
        virtual void callback_getActivityDetail(const QueryPrxCallbackPromise::PromisegetActivityDetailPtr &ptr)
        {
            _promise_getActivityDetail.setValue(ptr);
        }
        virtual void callback_getActivityDetail_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getActivityDetail_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getActivityDetail.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryPrxCallbackPromise::PromisegetActivityDetailPtr > _promise_getActivityDetail;

    public:
        struct PromisegetActivityList: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<CommActivityManager::ActivityItem> sRsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryPrxCallbackPromise::PromisegetActivityList > PromisegetActivityListPtr;

        QueryPrxCallbackPromise(const promise::Promise< QueryPrxCallbackPromise::PromisegetActivityListPtr > &promise)
        : _promise_getActivityList(promise)
        {}
        
        virtual void callback_getActivityList(const QueryPrxCallbackPromise::PromisegetActivityListPtr &ptr)
        {
            _promise_getActivityList.setValue(ptr);
        }
        virtual void callback_getActivityList_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getActivityList_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getActivityList.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryPrxCallbackPromise::PromisegetActivityListPtr > _promise_getActivityList;

    public:
        struct PromisegetCommunityDetail: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            CommActivityManager::CommunityInfo sRsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryPrxCallbackPromise::PromisegetCommunityDetail > PromisegetCommunityDetailPtr;

        QueryPrxCallbackPromise(const promise::Promise< QueryPrxCallbackPromise::PromisegetCommunityDetailPtr > &promise)
        : _promise_getCommunityDetail(promise)
        {}
        
        virtual void callback_getCommunityDetail(const QueryPrxCallbackPromise::PromisegetCommunityDetailPtr &ptr)
        {
            _promise_getCommunityDetail.setValue(ptr);
        }
        virtual void callback_getCommunityDetail_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getCommunityDetail_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getCommunityDetail.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryPrxCallbackPromise::PromisegetCommunityDetailPtr > _promise_getCommunityDetail;

    public:
        struct PromisegetCommunityList: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<CommActivityManager::CommunityItem> sRsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryPrxCallbackPromise::PromisegetCommunityList > PromisegetCommunityListPtr;

        QueryPrxCallbackPromise(const promise::Promise< QueryPrxCallbackPromise::PromisegetCommunityListPtr > &promise)
        : _promise_getCommunityList(promise)
        {}
        
        virtual void callback_getCommunityList(const QueryPrxCallbackPromise::PromisegetCommunityListPtr &ptr)
        {
            _promise_getCommunityList.setValue(ptr);
        }
        virtual void callback_getCommunityList_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getCommunityList_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getCommunityList.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryPrxCallbackPromise::PromisegetCommunityListPtr > _promise_getCommunityList;

    public:
        struct PromisegetUserInfo: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            CommActivityManager::UserInfo sRsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryPrxCallbackPromise::PromisegetUserInfo > PromisegetUserInfoPtr;

        QueryPrxCallbackPromise(const promise::Promise< QueryPrxCallbackPromise::PromisegetUserInfoPtr > &promise)
        : _promise_getUserInfo(promise)
        {}
        
        virtual void callback_getUserInfo(const QueryPrxCallbackPromise::PromisegetUserInfoPtr &ptr)
        {
            _promise_getUserInfo.setValue(ptr);
        }
        virtual void callback_getUserInfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getUserInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getUserInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryPrxCallbackPromise::PromisegetUserInfoPtr > _promise_getUserInfo;

    public:
        struct Promisetest: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< QueryPrxCallbackPromise::Promisetest > PromisetestPtr;

        QueryPrxCallbackPromise(const promise::Promise< QueryPrxCallbackPromise::PromisetestPtr > &promise)
        : _promise_test(promise)
        {}
        
        virtual void callback_test(const QueryPrxCallbackPromise::PromisetestPtr &ptr)
        {
            _promise_test.setValue(ptr);
        }
        virtual void callback_test_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:test_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_test.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< QueryPrxCallbackPromise::PromisetestPtr > _promise_test;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Query_all[]=
            {
                "getActivityDetail",
                "getActivityList",
                "getCommunityDetail",
                "getCommunityList",
                "getUserInfo",
                "test"
            };

            pair<string*, string*> r = equal_range(__Query_all, __Query_all+6, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Query_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getActivityDetail_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryPrxCallbackPromise::PromisegetActivityDetailPtr ptr = new QueryPrxCallbackPromise::PromisegetActivityDetail();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sRsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getActivityDetail_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getActivityDetail_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getActivityDetail(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getActivityList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryPrxCallbackPromise::PromisegetActivityListPtr ptr = new QueryPrxCallbackPromise::PromisegetActivityList();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sRsp, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getActivityList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getActivityList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getActivityList(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getCommunityDetail_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryPrxCallbackPromise::PromisegetCommunityDetailPtr ptr = new QueryPrxCallbackPromise::PromisegetCommunityDetail();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sRsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getCommunityDetail_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getCommunityDetail_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getCommunityDetail(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getCommunityList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryPrxCallbackPromise::PromisegetCommunityListPtr ptr = new QueryPrxCallbackPromise::PromisegetCommunityList();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sRsp, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getCommunityList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getCommunityList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getCommunityList(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getUserInfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryPrxCallbackPromise::PromisegetUserInfoPtr ptr = new QueryPrxCallbackPromise::PromisegetUserInfo();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sRsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getUserInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getUserInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getUserInfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    QueryPrxCallbackPromise::PromisetestPtr ptr = new QueryPrxCallbackPromise::Promisetest();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_test(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<QueryPrxCallbackPromise> QueryPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class QueryCoroPrxCallback: public QueryPrxCallback
    {
    public:
        virtual ~QueryCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Query_all[]=
            {
                "getActivityDetail",
                "getActivityList",
                "getCommunityDetail",
                "getCommunityList",
                "getUserInfo",
                "test"
            };

            pair<string*, string*> r = equal_range(__Query_all, __Query_all+6, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Query_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getActivityDetail_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        CommActivityManager::ActivityItem sRsp;
                        _is.read(sRsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_getActivityDetail(_ret, sRsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getActivityDetail_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getActivityDetail_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getActivityList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<CommActivityManager::ActivityItem> sRsp;
                        _is.read(sRsp, 1, true);
                        setResponseContext(msg->response.context);

                        callback_getActivityList(_ret, sRsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getActivityList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getActivityList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getCommunityDetail_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        CommActivityManager::CommunityInfo sRsp;
                        _is.read(sRsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_getCommunityDetail(_ret, sRsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getCommunityDetail_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getCommunityDetail_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getCommunityList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<CommActivityManager::CommunityItem> sRsp;
                        _is.read(sRsp, 1, true);
                        setResponseContext(msg->response.context);

                        callback_getCommunityList(_ret, sRsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getCommunityList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getCommunityList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getUserInfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        CommActivityManager::UserInfo sRsp;
                        _is.read(sRsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_getUserInfo(_ret, sRsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getUserInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getUserInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_test(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<QueryCoroPrxCallback> QueryCoroPrxCallbackPtr;

    /* proxy for client */
    class QueryProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 getActivityDetail(const std::string & activityId,CommActivityManager::ActivityItem &sRsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(activityId, 1);
            _os.write(sRsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getActivityDetail", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sRsp, 2, true);
            return _ret;
        }

        void async_getActivityDetail(QueryPrxCallbackPtr callback,const std::string &activityId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(activityId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getActivityDetail", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryPrxCallbackPromise::PromisegetActivityDetailPtr > promise_async_getActivityDetail(const std::string &activityId,const map<string, string>& context)
        {
            promise::Promise< QueryPrxCallbackPromise::PromisegetActivityDetailPtr > promise;
            QueryPrxCallbackPromisePtr callback = new QueryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(activityId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getActivityDetail", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getActivityDetail(QueryCoroPrxCallbackPtr callback,const std::string &activityId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(activityId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getActivityDetail", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 getActivityList(vector<CommActivityManager::ActivityItem> &sRsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sRsp, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getActivityList", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sRsp, 1, true);
            return _ret;
        }

        void async_getActivityList(QueryPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getActivityList", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryPrxCallbackPromise::PromisegetActivityListPtr > promise_async_getActivityList(const map<string, string>& context)
        {
            promise::Promise< QueryPrxCallbackPromise::PromisegetActivityListPtr > promise;
            QueryPrxCallbackPromisePtr callback = new QueryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getActivityList", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getActivityList(QueryCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getActivityList", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 getCommunityDetail(const std::string & commId,CommActivityManager::CommunityInfo &sRsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(commId, 1);
            _os.write(sRsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getCommunityDetail", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sRsp, 2, true);
            return _ret;
        }

        void async_getCommunityDetail(QueryPrxCallbackPtr callback,const std::string &commId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(commId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getCommunityDetail", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryPrxCallbackPromise::PromisegetCommunityDetailPtr > promise_async_getCommunityDetail(const std::string &commId,const map<string, string>& context)
        {
            promise::Promise< QueryPrxCallbackPromise::PromisegetCommunityDetailPtr > promise;
            QueryPrxCallbackPromisePtr callback = new QueryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(commId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getCommunityDetail", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getCommunityDetail(QueryCoroPrxCallbackPtr callback,const std::string &commId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(commId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getCommunityDetail", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 getCommunityList(vector<CommActivityManager::CommunityItem> &sRsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sRsp, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getCommunityList", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sRsp, 1, true);
            return _ret;
        }

        void async_getCommunityList(QueryPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getCommunityList", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryPrxCallbackPromise::PromisegetCommunityListPtr > promise_async_getCommunityList(const map<string, string>& context)
        {
            promise::Promise< QueryPrxCallbackPromise::PromisegetCommunityListPtr > promise;
            QueryPrxCallbackPromisePtr callback = new QueryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getCommunityList", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getCommunityList(QueryCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getCommunityList", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 getUserInfo(const std::string & sUserId,CommActivityManager::UserInfo &sRsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sUserId, 1);
            _os.write(sRsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getUserInfo", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sRsp, 2, true);
            return _ret;
        }

        void async_getUserInfo(QueryPrxCallbackPtr callback,const std::string &sUserId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sUserId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getUserInfo", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryPrxCallbackPromise::PromisegetUserInfoPtr > promise_async_getUserInfo(const std::string &sUserId,const map<string, string>& context)
        {
            promise::Promise< QueryPrxCallbackPromise::PromisegetUserInfoPtr > promise;
            QueryPrxCallbackPromisePtr callback = new QueryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sUserId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getUserInfo", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getUserInfo(QueryCoroPrxCallbackPtr callback,const std::string &sUserId,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sUserId, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getUserInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 test(const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_test(QueryPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< QueryPrxCallbackPromise::PromisetestPtr > promise_async_test(const map<string, string>& context)
        {
            promise::Promise< QueryPrxCallbackPromise::PromisetestPtr > promise;
            QueryPrxCallbackPromisePtr callback = new QueryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_test(QueryCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        QueryProxy* tars_hash(int64_t key)
        {
            return (QueryProxy*)ServantProxy::tars_hash(key);
        }

        QueryProxy* tars_consistent_hash(int64_t key)
        {
            return (QueryProxy*)ServantProxy::tars_consistent_hash(key);
        }

        QueryProxy* tars_set_timeout(int msecond)
        {
            return (QueryProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<QueryProxy> QueryPrx;

    /* servant for server */
    class Query : public tars::Servant
    {
    public:
        virtual ~Query(){}
        virtual tars::Int32 getActivityDetail(const std::string & activityId,CommActivityManager::ActivityItem &sRsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_getActivityDetail(tars::TarsCurrentPtr current, tars::Int32 _ret, const CommActivityManager::ActivityItem &sRsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sRsp", sRsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sRsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 getActivityList(vector<CommActivityManager::ActivityItem> &sRsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_getActivityList(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<CommActivityManager::ActivityItem> &sRsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sRsp", sRsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sRsp, 1);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 getCommunityDetail(const std::string & commId,CommActivityManager::CommunityInfo &sRsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_getCommunityDetail(tars::TarsCurrentPtr current, tars::Int32 _ret, const CommActivityManager::CommunityInfo &sRsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sRsp", sRsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sRsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 getCommunityList(vector<CommActivityManager::CommunityItem> &sRsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_getCommunityList(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<CommActivityManager::CommunityItem> &sRsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sRsp", sRsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sRsp, 1);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 getUserInfo(const std::string & sUserId,CommActivityManager::UserInfo &sRsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_getUserInfo(tars::TarsCurrentPtr current, tars::Int32 _ret, const CommActivityManager::UserInfo &sRsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sRsp", sRsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sRsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 test(tars::TarsCurrentPtr current) = 0;
        static void async_response_test(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __CommActivityManager__Query_all[]=
            {
                "getActivityDetail",
                "getActivityList",
                "getCommunityDetail",
                "getCommunityList",
                "getUserInfo",
                "test"
            };

            pair<string*, string*> r = equal_range(__CommActivityManager__Query_all, __CommActivityManager__Query_all+6, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __CommActivityManager__Query_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string activityId;
                    CommActivityManager::ActivityItem sRsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("activityId", activityId);
                        tarsAttr.getByDefault("sRsp", sRsp, sRsp);
                    }
                    else
                    {
                        _is.read(activityId, 1, true);
                        _is.read(sRsp, 2, false);
                    }
                    tars::Int32 _ret = getActivityDetail(activityId,sRsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sRsp", sRsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sRsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<CommActivityManager::ActivityItem> sRsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.getByDefault("sRsp", sRsp, sRsp);
                    }
                    else
                    {
                        _is.read(sRsp, 1, false);
                    }
                    tars::Int32 _ret = getActivityList(sRsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sRsp", sRsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sRsp, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string commId;
                    CommActivityManager::CommunityInfo sRsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("commId", commId);
                        tarsAttr.getByDefault("sRsp", sRsp, sRsp);
                    }
                    else
                    {
                        _is.read(commId, 1, true);
                        _is.read(sRsp, 2, false);
                    }
                    tars::Int32 _ret = getCommunityDetail(commId,sRsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sRsp", sRsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sRsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<CommActivityManager::CommunityItem> sRsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.getByDefault("sRsp", sRsp, sRsp);
                    }
                    else
                    {
                        _is.read(sRsp, 1, false);
                    }
                    tars::Int32 _ret = getCommunityList(sRsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sRsp", sRsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sRsp, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string sUserId;
                    CommActivityManager::UserInfo sRsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("sUserId", sUserId);
                        tarsAttr.getByDefault("sRsp", sRsp, sRsp);
                    }
                    else
                    {
                        _is.read(sUserId, 1, true);
                        _is.read(sRsp, 2, false);
                    }
                    tars::Int32 _ret = getUserInfo(sUserId,sRsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sRsp", sRsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sRsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                    }
                    else
                    {
                    }
                    tars::Int32 _ret = test(_current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
